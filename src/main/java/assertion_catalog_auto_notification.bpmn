<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/test">
  <collaboration id="Collaboration">
    <participant id="createAssertionAutoNotification" name="Create Assertion Auto Notification" processRef="createAssertionAutoNotificationWorkflowV3"></participant>
  </collaboration>
  <process id="createAssertionAutoNotificationWorkflowV3" name="Create Assertion Auto-notification Test V3" isExecutable="true">
    <documentation>Assertion Catalog Auto-notification</documentation>
    <laneSet id="laneSet_createAssertionAutoNotificationWorkflowV3">
      <lane id="lane1">
        <flowNodeRef>startevent1</flowNodeRef>
        <flowNodeRef>exclusivegateway2</flowNodeRef>
        <flowNodeRef>exclusivegateway3</flowNodeRef>
        <flowNodeRef>exclusivegateway4</flowNodeRef>
        <flowNodeRef>exclusivegateway5</flowNodeRef>
        <flowNodeRef>exclusivegateway6</flowNodeRef>
        <flowNodeRef>endevent1</flowNodeRef>
        <flowNodeRef>cancelTask</flowNodeRef>
        <flowNodeRef>setDateTimeList</flowNodeRef>
        <flowNodeRef>exclusivegateway7</flowNodeRef>
        <flowNodeRef>setNextNotificationDate</flowNodeRef>
        <flowNodeRef>setInProgressAssertions</flowNodeRef>
        <flowNodeRef>setUnderProducerReviewAssertions</flowNodeRef>
        <flowNodeRef>setAEProducerInProgress</flowNodeRef>
        <flowNodeRef>setMDS</flowNodeRef>
        <flowNodeRef>boundarytimer1</flowNodeRef>
        <flowNodeRef>notifyAEProducerInProgress</flowNodeRef>
        <flowNodeRef>notifyMDS</flowNodeRef>
        <flowNodeRef>notifyAEProducerUnderProducerReivew</flowNodeRef>
      </lane>
    </laneSet>
    <startEvent id="startevent1" name="Create Assertion Auto-notification" activiti:initiator="startUser">
      <extensionElements>
        <activiti:formProperty id="yearInput" name="Target Year" type="string" default="2016" required="true"></activiti:formProperty>
        <activiti:formProperty id="dateInputs" name="Target Dates(1/7,2/5,3/7)" type="string" default="1/29,1/30" required="true"></activiti:formProperty>
        <activiti:formProperty id="UUID_status_InProgress" name="UUID STATUS IN PROGRESS" type="string" default="00000000-0000-0000-0000-000000005019" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="UUID_status_UnderProducerReview" name="UUID STATUS UNDER PRODUCER REVIEW" type="string" default="7868232e-6af6-4e4a-b6b9-4e9ee0bdd223" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="assertionVocabularyID" name="ASSERTION VOCABULARY ID" type="string" default="3a38699d-c93a-44af-8664-388e0f9e5db4" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="UUID_Role_AEProducer" name="UUID ROLE AE PRODUCER" type="string" default="5d32fa71-8f2a-4cf5-a6ac-938d2529ad93" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="UUID_Role_MDS" name="UUID ROLE MDS" type="string" default="c70d49a5-2797-4e4e-a77b-30029e444184" readable="false"></activiti:formProperty>
        <activiti:formProperty id="debug" name="Debug" type="boolean" default="true" readable="false" required="true"></activiti:formProperty>
      </extensionElements>
    </startEvent>
    <scriptTask id="setNextNotificationDate" name="set next notification date" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>import java.text.DateFormat
import java.text.SimpleDateFormat
import groovy.time.TimeCategory

loggerComponent.info("[[ LOGGING ]] - ********SET NEXT NOTIFICATION DATE SCRIPT BEGIN******");

/*task terminate flag, true to end task if no more notifiy date in notification date list*/
def taskTerminate = false;

Date currentDate =  new Date();

def getISO8601Date = { Date date-&gt;
		TimeZone tz = TimeZone.getTimeZone("UTC");
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'");
		df.setTimeZone(tz);
		String nowAsISO = df.format(date);
		nowAsISO;
	}

def getNextNotificationDate ={List&lt;Date&gt; notificationDateList-&gt;
		Date nextNotifcationDate;
		/*Loop through the notification Date List, and find the next one*/
		if(debug){
			loggerComponent.info("[[ DEBUG ]] - ==========notificationDateList=========="+notificationDateList);
		}
		for (notifcationDate in notificationDateList){
			if(currentDate &lt; notifcationDate){
				nextNotifcationDate = notifcationDate;
				break;
			}
		}
		/*If this year does not include any more recertification dates, set nextNotifcationDate to current date and terminate to true */
		if(nextNotifcationDate == null){
			nextNotifcationDate = currentDate;
			taskTerminate = true;
		}	
		nextNotifcationDate;
	}

String nextNotificationDate;

if(debug) {
//	nextDay = currentDate;
//	use( TimeCategory ) {
//	    nextDay = nextDay+ 1.minutes;
//	}
//	nextNotificationDate = getISO8601Date(nextDay);
//	loggerComponent.info("[[ DEBUG ]] - ==========nextNotificationDate=========="+nextNotificationDate);
} else {
	nextDay = getNextNotificationDate(notificationDateList);
	nextNotificationDate = getISO8601Date(nextDay);
	loggerComponent.info("[[ LOGGING ]] - ==========testNotificationDate=========="+nextDay);
	loggerComponent.info("[[ LOGGING ]] - ==========isoTestNotificationDate=========="+nextNotificationDate);
}

currentDate = currentDate;
use( TimeCategory ) {
    currentDate = currentDate+ 1.minutes;
}
nextNotificationDate = getISO8601Date(currentDate);
loggerComponent.info("[[ DEBUG ]] - ==========nextNotificationDate=========="+nextNotificationDate);
execution.setVariable('nextDay', currentDate);
execution.setVariable('nextNotificationDate', nextNotificationDate);
execution.setVariable('taskTerminate', taskTerminate);
loggerComponent.info("[[ LOGGING ]] - ********SET NEXT NOTIFICATION DATE SCRIPT END******");
</script>
    </scriptTask>
    <scriptTask id="setInProgressAssertions" name="set &quot;in progress&quot; assertions" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("[[ LOGGING ]] - ********SET IN PROGRESS ASSERTION SCRIPT BEGIN******");
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========UUID_status_InProgress=========="+UUID_status_InProgress);
  loggerComponent.info("[[ DEBUG ]] - ==========assertionVocabularyID=========="+assertionVocabularyID);
}

def inProgressAssertions = [];
def inProgressAssertionsEmpty = false;
vocabularyComponent.getTerms(assertionVocabularyID,0,0).each{ assertion -&gt;
  assertionId = assertion.getId();
  if(assertion.getStatus().getId() == UUID_status_InProgress){   
    if(debug){
      loggerComponent.info("[[ DEBUG ]] - ========== assertion uuid ========== " + assertion.getId());
    }
    inProgressAssertions.add(assertionId);
  }
}
inProgressAssertions.unique();
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressAssertions=========="+inProgressAssertions);
}
if(inProgressAssertions.size()==0){
  inProgressAssertionsEmpty = true;
}
execution.setVariable('inProgressAssertions', inProgressAssertions);
execution.setVariable('inProgressAssertionsEmpty', inProgressAssertionsEmpty);
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressAssertions=========="+inProgressAssertions);
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressAssertionsEmpty=========="+inProgressAssertionsEmpty);
}
loggerComponent.info("[[ LOGGING ]] - ********SET IN PROGRESS ASSERTION SCRIPT END******");
</script>
    </scriptTask>
    <exclusiveGateway id="exclusivegateway2" name="Exclusive Gateway"></exclusiveGateway>
    <scriptTask id="setUnderProducerReviewAssertions" name="set &quot;under producer review&quot; assertions" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("[[ LOGGING ]] - ********SET UNDER PRODUCER REVIEW ASSERTION SCRIPT BEGIN******");
if(debug){
	loggerComponent.info("[[ DEBUG ]] - ==========UUID_status_UnderProducerReview=========="+UUID_status_UnderProducerReview);
	loggerComponent.info("[[ DEBUG ]] - ==========assertionVocabularyID=========="+assertionVocabularyID);
}

def underProducerReviewAssertions = [];
def underProducerReviewAssertionsEmpty = false;
vocabularyComponent.getTerms(assertionVocabularyID,0,0).each{ assertion -&gt;
  assertionId = assertion.getId();
  if(assertion.getStatus().getId() == UUID_status_UnderProducerReview){
    if(debug){
      loggerComponent.info("[[ DEBUG ]] - ========== assertion uuid ========== " + assertion.getId());
    }
   	underProducerReviewAssertions.add(assertionId);
  }
}
underProducerReviewAssertions.unique();
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========underProducerReviewAssertions=========="+underProducerReviewAssertions);
}
if(underProducerReviewAssertions.size()==0){
	underProducerReviewAssertionsEmpty = true;
}
execution.setVariable('underProducerReviewAssertions', underProducerReviewAssertions);
execution.setVariable('underProducerReviewAssertionsEmpty', underProducerReviewAssertionsEmpty);
if(debug){
	loggerComponent.info("[[ DEBUG ]] - ==========underProducerReviewAssertions=========="+underProducerReviewAssertions);
	loggerComponent.info("[[ DEBUG ]] - ==========underProducerReviewAssertionsEmpty=========="+underProducerReviewAssertionsEmpty);
}
loggerComponent.info("[[ LOGGING ]] - ********SET UNDER PRODUCER REVIEW ASSERTION SCRIPT END******");
</script>
    </scriptTask>
    <exclusiveGateway id="exclusivegateway3" name="Exclusive Gateway"></exclusiveGateway>
    <sequenceFlow id="flow7" name="empty" sourceRef="exclusivegateway2" targetRef="setUnderProducerReviewAssertions">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${inProgressAssertionsEmpty}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow8" sourceRef="setUnderProducerReviewAssertions" targetRef="exclusivegateway3"></sequenceFlow>
    <sequenceFlow id="flow9" name="empty" sourceRef="exclusivegateway3" targetRef="setNextNotificationDate">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${underProducerReviewAssertionsEmpty}]]></conditionExpression>
    </sequenceFlow>
    <scriptTask id="setAEProducerInProgress" name="set AE Producer" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("[[ LOGGING ]] - ********SET IN PROGRESS AE PRODUCER LIST SCRIPT BEGIN******");
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========UUID_Role_AEProducer=========="+UUID_Role_AEProducer);
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressAssertions=========="+inProgressAssertions);
}
/*Notify AE Producer Use*/
def inProgressAEProducer = "";
def arrayAEProducer = [];
def inProgressAEProducerEmpty = false;
/*get AE-Producer by assertion*/
inProgressAssertions.each { assertionPicked -&gt;
  rightsComponent.getMembersByResourceAndRole(assertionPicked, UUID_Role_AEProducer).each { mem -&gt;
    arrayAEProducer.add(mem);
  } 
}
arrayAEProducer.unique();
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========arrayAEProducer=========="+arrayAEProducer);
}
if(arrayAEProducer.size()==0){
  inProgressAEProducerEmpty = true;
}
arrayAEProducer.each { mem -&gt;
  if (inProgressAEProducer != "") {
        inProgressAEProducer = inProgressAEProducer + ",user(" + mem.user.getUserName() + ")";
      } else {
        inProgressAEProducer = "user(" + mem.user.getUserName() + ")";
      }    
      if(debug){ 
        loggerComponent.info ("[[ DEBUG ]] USER NAME OF AEProducer IS " + inProgressAEProducer);
      }
}
execution.setVariable('inProgressAEProducer', inProgressAEProducer);
execution.setVariable('inProgressAEProducerEmpty', inProgressAEProducerEmpty);
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressAEProducer=========="+inProgressAEProducer);
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressAEProducerEmpty=========="+inProgressAEProducerEmpty);
}
loggerComponent.info("[[ LOGGING ]] - ********SET IN PROGRESS AE PRODUCER LIST SCRIPT END******");

</script>
    </scriptTask>
    <exclusiveGateway id="exclusivegateway4" name="Exclusive Gateway"></exclusiveGateway>
    <sequenceFlow id="flow10" name="not empty" sourceRef="exclusivegateway2" targetRef="setAEProducerInProgress">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${!inProgressAssertionsEmpty}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow12" name="not empty" sourceRef="exclusivegateway4" targetRef="notifyAEProducerInProgress">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${!inProgressAEProducerEmpty}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow16" name="not empty" sourceRef="exclusivegateway3" targetRef="setAEProducerUnderProducerReview">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${!underProducerReviewAssertionsEmpty}]]></conditionExpression>
    </sequenceFlow>
    <exclusiveGateway id="exclusivegateway5" name="Exclusive Gateway"></exclusiveGateway>
    <exclusiveGateway id="exclusivegateway6" name="Exclusive Gateway"></exclusiveGateway>
    <scriptTask id="setDateTimeList" name="Set date list" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>import com.collibra.dgc.core.exceptions.DGCException
import java.text.DateFormat
import java.text.SimpleDateFormat

loggerComponent.info("[[ LOGGING ]] - ********SET DATE TIME LIST SCRIPT BEGIN******");
if(debug){
	loggerComponent.info("[[ DEBUG ]] - ==========YEAR INPUTS==========" + yearInput);
	loggerComponent.info("[[ DEBUG ]] - ==========DATE INPUTS==========" + dateInputs);
	loggerComponent.info("[[ DEBUG ]] - ==========UUID_status_InProgress==========" + UUID_status_InProgress);
	loggerComponent.info("[[ DEBUG ]] - ==========UUID_status_UnderProducerReview==========" + UUID_status_UnderProducerReview);
	loggerComponent.info("[[ DEBUG ]] - ==========assertionVocabularyID==========" + assertionVocabularyID);
	loggerComponent.info("[[ DEBUG ]] - ==========UUID_Role_AEProducer==========" + UUID_Role_AEProducer);
	loggerComponent.info("[[ DEBUG ]] - ==========UUID_Role_MDS==========" + UUID_Role_MDS);
	loggerComponent.info("[[ DEBUG ]] - ==========debug==========" + debug);
}

int year = Calendar.getInstance().get(Calendar.YEAR);

/*Obtain and sort the provided dates (MM/dd)entered on start form*/
List&lt;Date&gt; notificationDateList	= [];
List&lt;String&gt; notificationDatStringList = utility.toList(dateInputs);
notificationDatStringList.sort();

/*Date list validation*/
notificationDatStringList.each { date -&gt;
	try{
		validDate = new SimpleDateFormat('MM/dd/yyyy HH:mm:ss').parse(date.concat('/').concat(yearInput).concat(' 9:00:00'));
		notificationDateList.add(validDate);
	}catch(java.text.ParseException e){
		dgcError = new DGCException("${date} - Dates must be in MM/DD format");
		dgcError.setTitleCode ("Unparseable Date");
		throw dgcError
	}
}
/*Target year validation*/
if(year.toString()&gt;yearInput) {
	dgcError = new DGCException("${yearInput} - Dates must be equal or larger than ${year}");
	dgcError.setTitleCode ("Invalid target year");
	throw dgcError;
}

execution.setVariable('notificationDateList', notificationDateList);
if(debug){
	loggerComponent.info("[[ DEBUG ]] - ==========NOTIFICATION DATA LIST==========" + notificationDateList);
}
loggerComponent.info("[[ LOGGING ]] - ********SET DATE TIME LIST SCRIPT END******");</script>
    </scriptTask>
    <sequenceFlow id="flow23" sourceRef="startevent1" targetRef="setDateTimeList"></sequenceFlow>
    <endEvent id="endevent1" name="End"></endEvent>
    <sequenceFlow id="flow27" sourceRef="setDateTimeList" targetRef="setNextNotificationDate"></sequenceFlow>
    <sequenceFlow id="flow31" sourceRef="setInProgressAssertions" targetRef="exclusivegateway2"></sequenceFlow>
    <sequenceFlow id="flow35" name="terminate false" sourceRef="exclusivegateway6" targetRef="setInProgressAssertions">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${!taskTerminate}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow36" name="terminate true" sourceRef="exclusivegateway6" targetRef="endevent1">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${taskTerminate}]]></conditionExpression>
    </sequenceFlow>
    <userTask id="cancelTask" name="Next trigger day is ${nextDay}" activiti:candidateUsers="user(${startUser})">
      <extensionElements>
        <activiti:formProperty id="cancelTask" name="Cancel Task" type="button"></activiti:formProperty>
      </extensionElements>
    </userTask>
    <sequenceFlow id="flow38" sourceRef="cancelTask" targetRef="endevent1"></sequenceFlow>
    <sequenceFlow id="flow39" name="empty" sourceRef="exclusivegateway5" targetRef="setNextNotificationDate">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${underProducerReviewAEProducerEmpty}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow41" sourceRef="setNextNotificationDate" targetRef="cancelTask"></sequenceFlow>
    <sequenceFlow id="flow42" name="not empty" sourceRef="exclusivegateway5" targetRef="notifyAEProducerUnderProducerReivew">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${!underProducerReviewAEProducerEmpty}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow43" sourceRef="notifyAEProducerUnderProducerReivew" targetRef="setNextNotificationDate"></sequenceFlow>
    <scriptTask id="setMDS" name="set MDS" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("[[ LOGGING ]] - ********SET IN PROGRESS PRODUCER MDS LIST SCRIPT BEGIN******");
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========UUID_Role_MDS=========="+UUID_Role_MDS);
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressAssertions=========="+inProgressAssertions);
}
/*Notify AE Producer Use*/
def inProgressProducerMDS = "";
def arrayMDS = [];
def inProgressProducerMDSEmpty = false;
/*get AE-Producer by assertion*/
inProgressAssertions.each { assertionPicked -&gt;
  rightsComponent.getMembersByResourceAndRole(assertionPicked, UUID_Role_MDS).each { mem -&gt;
    arrayMDS.add(mem)
  }
}
arrayMDS.unique();
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========arrayMDS=========="+arrayMDS);
}
if(arrayMDS.size()==0){
  inProgressProducerMDSEmpty = true;
}
arrayMDS.each { mem -&gt;
  if (inProgressProducerMDS != "") {
      inProgressProducerMDS = inProgressProducerMDS + ",user(" + mem.user.getUserName() + ")"  
    } else {
      inProgressProducerMDS = "user(" + mem.user.getUserName() + ")" 
  }
}
execution.setVariable('inProgressProducerMDS', inProgressProducerMDS);
execution.setVariable('inProgressProducerMDSEmpty', inProgressProducerMDSEmpty);
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressProducerMDS=========="+inProgressProducerMDS);
  loggerComponent.info("[[ DEBUG ]] - ==========inProgressProducerMDSEmpty=========="+inProgressProducerMDSEmpty);
}
loggerComponent.info("[[ LOGGING ]] - ********SET IN PROGRESS PRODUCER MDS LIST SCRIPT END******");

</script>
    </scriptTask>
    <sequenceFlow id="flow44" name="empty" sourceRef="exclusivegateway4" targetRef="setMDS">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${inProgressAEProducerEmpty}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow45" sourceRef="notifyAEProducerInProgress" targetRef="setMDS"></sequenceFlow>
    <exclusiveGateway id="exclusivegateway7" name="Exclusive Gateway"></exclusiveGateway>
    <sequenceFlow id="flow46" sourceRef="setMDS" targetRef="exclusivegateway7"></sequenceFlow>
    <sequenceFlow id="flow47" name="not empty" sourceRef="exclusivegateway7" targetRef="notifyMDS">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${!inProgressProducerMDSEmpty}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow48" name="empty" sourceRef="exclusivegateway7" targetRef="setUnderProducerReviewAssertions">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${inProgressProducerMDSEmpty}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow49" sourceRef="notifyMDS" targetRef="setUnderProducerReviewAssertions"></sequenceFlow>
    <sequenceFlow id="flow50" sourceRef="setAEProducerInProgress" targetRef="exclusivegateway4"></sequenceFlow>
    <boundaryEvent id="boundarytimer1" name="Timer" attachedToRef="cancelTask" cancelActivity="true">
      <timerEventDefinition>
        <timeDate>${nextNotificationDate}</timeDate>
      </timerEventDefinition>
    </boundaryEvent>
    <sequenceFlow id="flow51" sourceRef="boundarytimer1" targetRef="exclusivegateway6"></sequenceFlow>
    <scriptTask id="notifyAEProducerInProgress" name="notify AE-Producer" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("[[ LOGGING ]] - ********NOTIFY AE PRODUCER******");</script>
    </scriptTask>
    <scriptTask id="notifyMDS" name="notify MDS" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("[[ LOGGING ]] - ********NOTIFY MDS******");</script>
    </scriptTask>
    <scriptTask id="notifyAEProducerUnderProducerReivew" name="notify AE-Producer" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("[[ LOGGING ]] - ********NOTIFY AE PRODUCER******");</script>
    </scriptTask>
    <scriptTask id="setAEProducerUnderProducerReview" name="set AE-Producer" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerComponent.info("[[ LOGGING ]] - ********SET IN PROGRESS AE PRODUCER LIST SCRIPT BEGIN******");
if(debug){
	loggerComponent.info("[[ DEBUG ]] - ==========UUID_Role_AEProducer=========="+UUID_Role_AEProducer);
	loggerComponent.info("[[ DEBUG ]] - ==========underProducerReviewAssertions=========="+underProducerReviewAssertions);
}
/*Notify AE Producer Use*/
def underProducerReviewAEProducer = "";
def arrayAEProducer = [];
def underProducerReviewAEProducerEmpty = false;
/*get AE-Producer by assertion*/
underProducerReviewAssertions.each { assertionPicked -&gt;
  rightsComponent.getMembersByResourceAndRole(assertionPicked, UUID_Role_AEProducer).each { mem -&gt;
    arrayAEProducer.add(mem);
  } 
}
arrayAEProducer.unique();
if(debug){
  loggerComponent.info("[[ DEBUG ]] - ==========arrayAEProducer=========="+arrayAEProducer);
}
if(arrayAEProducer.size()==0){
	underProducerReviewAEProducerEmpty = true;
}
arrayAEProducer.each { mem -&gt;
  if (underProducerReviewAEProducer != "") {
        underProducerReviewAEProducer = underProducerReviewAEProducer + ",user(" + mem.user.getUserName() + ")";
      } else {
        underProducerReviewAEProducer = "user(" + mem.user.getUserName() + ")";
      } 
      if(debug){    
	      loggerComponent.info ("[[ DEBUG ]] USER NAME OF AEProducer IS " + underProducerReviewAEProducer);
	  }
}
execution.setVariable('underProducerReviewAEProducer', underProducerReviewAEProducer);
execution.setVariable('underProducerReviewAEProducerEmpty', underProducerReviewAEProducerEmpty);
if(debug){
	loggerComponent.info("[[ DEBUG ]] - ==========underProducerReviewAEProducer=========="+underProducerReviewAEProducer);
	loggerComponent.info("[[ DEBUG ]] - ==========underProducerReviewAEProducerEmpty=========="+underProducerReviewAEProducerEmpty);
}
loggerComponent.info("[[ LOGGING ]] - ********SET IN PROGRESS AE PRODUCER LIST SCRIPT END******");

</script>
    </scriptTask>
    <sequenceFlow id="flow18" sourceRef="setAEProducerUnderProducerReview" targetRef="exclusivegateway5"></sequenceFlow>
  </process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_Collaboration">
    <bpmndi:BPMNPlane bpmnElement="Collaboration" id="BPMNPlane_Collaboration">
      <bpmndi:BPMNShape bpmnElement="createAssertionAutoNotification" id="BPMNShape_createAssertionAutoNotification">
        <omgdc:Bounds height="421.0" width="1031.0" x="20.0" y="40.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="lane1" id="BPMNShape_lane1">
        <omgdc:Bounds height="421.0" width="1011.0" x="40.0" y="40.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="startevent1" id="BPMNShape_startevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="60.0" y="80.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="setNextNotificationDate" id="BPMNShape_setNextNotificationDate">
        <omgdc:Bounds height="55.0" width="131.0" x="320.0" y="70.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="setInProgressAssertions" id="BPMNShape_setInProgressAssertions">
        <omgdc:Bounds height="55.0" width="141.0" x="60.0" y="233.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway2" id="BPMNShape_exclusivegateway2">
        <omgdc:Bounds height="40.0" width="40.0" x="222.0" y="240.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="setUnderProducerReviewAssertions" id="BPMNShape_setUnderProducerReviewAssertions">
        <omgdc:Bounds height="55.0" width="155.0" x="628.0" y="233.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway3" id="BPMNShape_exclusivegateway3">
        <omgdc:Bounds height="40.0" width="40.0" x="814.0" y="240.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="setAEProducerInProgress" id="BPMNShape_setAEProducerInProgress">
        <omgdc:Bounds height="55.0" width="105.0" x="190.0" y="310.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway4" id="BPMNShape_exclusivegateway4">
        <omgdc:Bounds height="40.0" width="40.0" x="330.0" y="317.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway5" id="BPMNShape_exclusivegateway5">
        <omgdc:Bounds height="40.0" width="40.0" x="922.0" y="317.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway6" id="BPMNShape_exclusivegateway6">
        <omgdc:Bounds height="40.0" width="40.0" x="532.0" y="167.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="setDateTimeList" id="BPMNShape_setDateTimeList">
        <omgdc:Bounds height="55.0" width="105.0" x="170.0" y="70.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent1" id="BPMNShape_endevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="740.0" y="170.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="cancelTask" id="BPMNShape_cancelTask">
        <omgdc:Bounds height="55.0" width="105.0" x="500.0" y="70.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="boundarytimer1" id="BPMNShape_boundarytimer1">
        <omgdc:Bounds height="30.0" width="30.0" x="538.0" y="114.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="setMDS" id="BPMNShape_setMDS">
        <omgdc:Bounds height="55.0" width="105.0" x="410.0" y="310.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway7" id="BPMNShape_exclusivegateway7">
        <omgdc:Bounds height="40.0" width="40.0" x="532.0" y="317.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="notifyAEProducerInProgress" id="BPMNShape_notifyAEProducerInProgress">
        <omgdc:Bounds height="55.0" width="105.0" x="298.0" y="380.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="notifyMDS" id="BPMNShape_notifyMDS">
        <omgdc:Bounds height="55.0" width="105.0" x="590.0" y="380.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="notifyAEProducerUnderProducerReivew" id="BPMNShape_notifyAEProducerUnderProducerReivew">
        <omgdc:Bounds height="55.0" width="105.0" x="890.0" y="380.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="setAEProducerUnderProducerReview" id="BPMNShape_setAEProducerUnderProducerReview">
        <omgdc:Bounds height="55.0" width="105.0" x="782.0" y="310.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="flow7" id="BPMNEdge_flow7">
        <omgdi:waypoint x="262.0" y="260.0"></omgdi:waypoint>
        <omgdi:waypoint x="628.0" y="260.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="29.0" x="262.0" y="238.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow8" id="BPMNEdge_flow8">
        <omgdi:waypoint x="783.0" y="260.0"></omgdi:waypoint>
        <omgdi:waypoint x="814.0" y="260.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow9" id="BPMNEdge_flow9">
        <omgdi:waypoint x="834.0" y="240.0"></omgdi:waypoint>
        <omgdi:waypoint x="833.0" y="46.0"></omgdi:waypoint>
        <omgdi:waypoint x="382.0" y="46.0"></omgdi:waypoint>
        <omgdi:waypoint x="385.0" y="70.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="29.0" x="834.0" y="220.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow10" id="BPMNEdge_flow10">
        <omgdi:waypoint x="242.0" y="280.0"></omgdi:waypoint>
        <omgdi:waypoint x="242.0" y="310.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="47.0" x="235.0" y="287.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow12" id="BPMNEdge_flow12">
        <omgdi:waypoint x="350.0" y="357.0"></omgdi:waypoint>
        <omgdi:waypoint x="350.0" y="380.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="47.0" x="352.0" y="357.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow16" id="BPMNEdge_flow16">
        <omgdi:waypoint x="834.0" y="280.0"></omgdi:waypoint>
        <omgdi:waypoint x="834.0" y="310.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="47.0" x="831.0" y="287.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow23" id="BPMNEdge_flow23">
        <omgdi:waypoint x="95.0" y="97.0"></omgdi:waypoint>
        <omgdi:waypoint x="170.0" y="97.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow27" id="BPMNEdge_flow27">
        <omgdi:waypoint x="275.0" y="97.0"></omgdi:waypoint>
        <omgdi:waypoint x="320.0" y="97.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow31" id="BPMNEdge_flow31">
        <omgdi:waypoint x="201.0" y="260.0"></omgdi:waypoint>
        <omgdi:waypoint x="222.0" y="260.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow35" id="BPMNEdge_flow35">
        <omgdi:waypoint x="532.0" y="187.0"></omgdi:waypoint>
        <omgdi:waypoint x="130.0" y="186.0"></omgdi:waypoint>
        <omgdi:waypoint x="130.0" y="233.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="71.0" x="431.0" y="165.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow36" id="BPMNEdge_flow36">
        <omgdi:waypoint x="572.0" y="187.0"></omgdi:waypoint>
        <omgdi:waypoint x="740.0" y="187.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="66.0" x="604.0" y="164.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow38" id="BPMNEdge_flow38">
        <omgdi:waypoint x="605.0" y="97.0"></omgdi:waypoint>
        <omgdi:waypoint x="757.0" y="97.0"></omgdi:waypoint>
        <omgdi:waypoint x="757.0" y="170.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow39" id="BPMNEdge_flow39">
        <omgdi:waypoint x="942.0" y="317.0"></omgdi:waypoint>
        <omgdi:waypoint x="941.0" y="45.0"></omgdi:waypoint>
        <omgdi:waypoint x="382.0" y="45.0"></omgdi:waypoint>
        <omgdi:waypoint x="385.0" y="70.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="29.0" x="949.0" y="288.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow41" id="BPMNEdge_flow41">
        <omgdi:waypoint x="451.0" y="97.0"></omgdi:waypoint>
        <omgdi:waypoint x="500.0" y="97.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow42" id="BPMNEdge_flow42">
        <omgdi:waypoint x="942.0" y="357.0"></omgdi:waypoint>
        <omgdi:waypoint x="942.0" y="380.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="47.0" x="942.0" y="357.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow43" id="BPMNEdge_flow43">
        <omgdi:waypoint x="995.0" y="407.0"></omgdi:waypoint>
        <omgdi:waypoint x="1017.0" y="407.0"></omgdi:waypoint>
        <omgdi:waypoint x="1017.0" y="46.0"></omgdi:waypoint>
        <omgdi:waypoint x="382.0" y="46.0"></omgdi:waypoint>
        <omgdi:waypoint x="385.0" y="70.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow44" id="BPMNEdge_flow44">
        <omgdi:waypoint x="370.0" y="337.0"></omgdi:waypoint>
        <omgdi:waypoint x="410.0" y="337.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="29.0" x="375.0" y="316.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow45" id="BPMNEdge_flow45">
        <omgdi:waypoint x="403.0" y="407.0"></omgdi:waypoint>
        <omgdi:waypoint x="462.0" y="406.0"></omgdi:waypoint>
        <omgdi:waypoint x="462.0" y="365.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow46" id="BPMNEdge_flow46">
        <omgdi:waypoint x="515.0" y="337.0"></omgdi:waypoint>
        <omgdi:waypoint x="532.0" y="337.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow47" id="BPMNEdge_flow47">
        <omgdi:waypoint x="552.0" y="357.0"></omgdi:waypoint>
        <omgdi:waypoint x="551.0" y="406.0"></omgdi:waypoint>
        <omgdi:waypoint x="590.0" y="407.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="47.0" x="552.0" y="357.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow48" id="BPMNEdge_flow48">
        <omgdi:waypoint x="552.0" y="317.0"></omgdi:waypoint>
        <omgdi:waypoint x="552.0" y="260.0"></omgdi:waypoint>
        <omgdi:waypoint x="628.0" y="260.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="29.0" x="540.0" y="297.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow49" id="BPMNEdge_flow49">
        <omgdi:waypoint x="695.0" y="407.0"></omgdi:waypoint>
        <omgdi:waypoint x="705.0" y="406.0"></omgdi:waypoint>
        <omgdi:waypoint x="705.0" y="288.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow50" id="BPMNEdge_flow50">
        <omgdi:waypoint x="295.0" y="337.0"></omgdi:waypoint>
        <omgdi:waypoint x="330.0" y="337.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow51" id="BPMNEdge_flow51">
        <omgdi:waypoint x="553.0" y="144.0"></omgdi:waypoint>
        <omgdi:waypoint x="552.0" y="167.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow18" id="BPMNEdge_flow18">
        <omgdi:waypoint x="887.0" y="337.0"></omgdi:waypoint>
        <omgdi:waypoint x="922.0" y="337.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</definitions>